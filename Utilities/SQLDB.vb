Public Class SQLDB
    Private nRecordCount As Integer = 0
    Private ErrMsg As String

    Public ErrorList As New List(Of String)
    Public ErrorMessage As New System.Text.StringBuilder
    '                                        Added by Tony20170222
    '                                        This can be used to catch the error(s) generated by a function/procedure.
    '                                        If your function returns a boolean value, use this to catch the errors inside your
    '                                        function and later on access this variable if you want to use this outside the function block.
    '                                        (See RunSQLs function for sample)


    'SQL Server connectors
    Private sqlcon As SqlClient.SqlConnection
    Private sqladp As SqlClient.SqlDataAdapter
    Private sqlcmd As SqlClient.SqlCommand
    Private sqlrdr As SqlClient.SqlDataReader

    'Initialize the Database
    'ConnectionString -> Connection string for the specified database or server.
    <System.Diagnostics.DebuggerStepThrough()> _
    Public Sub New(ByVal ConnectionString As String)
        _MPSConnectionString = ConnectionString
        sqlcon = New SqlClient.SqlConnection(ConnectionString)
    End Sub

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Sub New(ByVal MPSConnectionString As String, ByVal MPS_LOG_ConnectionString As String)
        _MPSConnectionString = MPSConnectionString
        _MPS_Log_ConnString = MPS_LOG_ConnectionString
        sqlcon = New SqlClient.SqlConnection(MPSConnectionString)
    End Sub


    'MPS Connection String  
    Private _MPSConnectionString As String = String.Empty
    Public ReadOnly Property GetConnectionString() As String
        Get
            Return _MPSConnectionString
        End Get
    End Property

    Private _MPS_Log_ConnString As String = String.Empty
    Public ReadOnly Property MPSAConnectionString() As String
        Get
            Return _MPS_Log_ConnString
        End Get
    End Property

    'Connected (if connected to database)    Private _Connected As Boolean = False    Public Property Connected() As Boolean        Get            Return _Connected        End Get        Set(value As Boolean)            _Connected = value        End Set    End Property

    'added by tony20170418
    Public Class DBConnectionParameter
        Public Host As String
        Public UID As String
        Public Pwd As String

        Public Sub New()
            Clear()
        End Sub

        Public Sub Clear()
            Host = ""
            UID = ""
            Pwd = ""
        End Sub
    End Class

    Public Const DBConnFileSeparator As String = "~"
    Public Shared Function ConvertMDCFileToDBConnectionOBJ(cFile As String, ByRef oDBConnection As SQLDB.DBConnectionParameter, Optional ShowMessage As Boolean = True) As Boolean
        Dim ReturnValue As Boolean = False
        If Not My.Computer.FileSystem.FileExists(cFile) Then
            If ShowMessage Then MsgBox("File [" & cFile & "] does not exist.", MsgBoxStyle.Information)
            GoTo RETURN_AND_EXIT
        End If

        Dim extension As String = System.IO.Path.GetExtension(cFile)
        If extension <> ".mdc" Then
            If ShowMessage Then MsgBox("Selected file [" & cFile & "] is not a .mdc format.", MsgBoxStyle.Information)
            GoTo RETURN_AND_EXIT
        End If

        Dim cConnStringEnc As String
        Dim cConnString As String
        Try
            Using objReader As New System.IO.StreamReader(cFile)
                cConnStringEnc = objReader.ReadToEnd()
                cConnString = sysMpsUserPassword("DECRYPT", cConnStringEnc)
            End Using

        Catch ex As Exception
            If ShowMessage Then MsgBox("Unable to read [" & cFile & "].", MsgBoxStyle.Information)
            GoTo RETURN_AND_EXIT
        End Try


        'Dim objReader As New System.IO.StreamReader(cFile)
        'Dim cConnStringEnc = objReader.ReadToEnd 'sysMpsUserPassword("ENCRYPT", cConnString)
        'Dim cConnString = sysMpsUserPassword("DECRYPT", cConnStringEnc)
        Dim arrConnString As String()

        arrConnString = cConnString.Split(DBConnFileSeparator)
        If arrConnString.Count <> 3 Then
            If ShowMessage Then MsgBox("MDC file [" & cFile & "] has invalid content.", MsgBoxStyle.Information)
            GoTo RETURN_AND_EXIT
        End If

        oDBConnection = New SQLDB.DBConnectionParameter
        With oDBConnection
            .Host = arrConnString(0).ToString
            .UID = arrConnString(1).ToString
            .Pwd = arrConnString(2).ToString
        End With
        ReturnValue = True

RETURN_AND_EXIT:
        Return ReturnValue
    End Function

    'Checks If Can Connect to Database
    Public Function CheckConnection() As Boolean        sqlcon = New SqlClient.SqlConnection(_MPSConnectionString)        Try            sqlcon.Open()            sqlcon.Close()            Connected = True            Return True        Catch ex As Exception            Connected = False            Return False        End Try        '"Data Source=localhost\sqlexpress;Database=MPS;Persist Security Info=True;User ID=sa;Password=stiteam;"    End Function

    ''Return the connection string.
    '<System.Diagnostics.DebuggerStepThrough()> _
    'Public Function GetConnectionString()
    '    Return sqlcon.ConnectionString
    'End Function

    'Creates a Recordset, requires sql statement
    '<System.Diagnostics.DebuggerStepThrough()> _
    Function CreateTable(ByVal sql As String, Optional ByVal timeOut As Integer = 150) As DataTable
        Dim ctable As New DataTable
        ErrorMessage = New System.Text.StringBuilder()
        Try
            sqlcon.Open()
            sqladp = New SqlClient.SqlDataAdapter(sql, sqlcon)
            sqladp.SelectCommand.CommandTimeout = timeOut 'time limit for the sql to execute
            sqladp.Fill(ctable)
            sqladp.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If ErrorMessage.Length > 0 Then ErrorMessage.Append(vbNewLine)
            ErrorMessage.Append(ex.Message)
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        nRecordCount = ctable.Rows.Count
        Return ctable
    End Function

    'Creates a Recordset, requires sql statement
    <System.Diagnostics.DebuggerStepThrough()> _
    Function CreateDataSet(ByVal queries() As String, ByVal relations() As String) As DataSet
        Dim data As New DataSet()
        Dim query As String, rel As String
        Try
            sqlcon.Open()
            For Each query In queries
                sqladp = New SqlClient.SqlDataAdapter
                sqladp.TableMappings.Add("Table", query.Split(";").GetValue(0))
                sqlcmd = New SqlClient.SqlCommand(query.Split(";").GetValue(1), sqlcon)
                sqladp.SelectCommand = sqlcmd
                sqladp.Fill(data)
                sqladp.Dispose()
            Next
            For Each rel In relations
                Dim rel_item() As String = rel.Split(";")
                Dim keyColumn As DataColumn = data.Tables(rel_item(1).Split(".").GetValue(0)).Columns(rel_item(1).Split(".").GetValue(1))
                Dim foreignKeyColumn As DataColumn = data.Tables(rel_item(2).Split(".").GetValue(0)).Columns(rel_item(2).Split(".").GetValue(1))
                data.Relations.Add(rel_item(0), keyColumn, foreignKeyColumn)
            Next
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        Return data
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Function FillTable(ByVal sql As String, ByVal ctable As DataTable) As DataTable
        Dim xtable As DataTable = ctable.Clone
        Try
            sqlcon.Open()
            sqladp = New SqlClient.SqlDataAdapter(sql, sqlcon)
            sqladp.Fill(xtable)
            sqladp.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        nRecordCount = xtable.Rows.Count
        Return xtable
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Function RecordCount() As Integer
        Return nRecordCount
    End Function

    'Return the ID of the newly inserted Crew
    Public Function SaveNewCrew(qCrewDetails As String, _CrewInformation As CrewDetail) As String
        Dim retVal As String = ""    'ID

        Dim tran As SqlClient.SqlTransaction = Nothing
        Dim CrewInserted As Boolean = False
        Dim idInserted As Boolean = False
        Dim AcTInserted As Boolean = False
        Dim strIDs As String = ""
        Dim gQuery = ""
        Dim inGroup As Boolean = False
        Dim inAct As Boolean = False

        Try
            sqlcon.Open()
            tran = sqlcon.BeginTransaction()

            'Insert Crew
            Using cmd As New SqlClient.SqlCommand
                cmd.CommandText = qCrewDetails
                cmd.Transaction = tran
                cmd.Connection = sqlcon
                CrewInserted = (cmd.ExecuteNonQuery().Equals(1))
                'cmd.CommandText = "SELECT [PKey] FROM mps.dbo.tblCrewInfo WHERE ID=IDENT_CURRENT('tblCrewInfo')"
                '_id = sqlcmd.ExecuteScalar()
            End Using

            'Get ID
            If CrewInserted Then
                Using cmd As New SqlClient.SqlCommand
                    cmd.Connection = sqlcon
                    cmd.CommandText = "SELECT [PKey] FROM mps.dbo.tblCrewInfo WHERE ID=IDENT_CURRENT('tblCrewInfo')"
                    cmd.Transaction = tran
                    strIDs = cmd.ExecuteScalar()
                    If strIDs <> "" Then
                        idInserted = True
                    Else
                        idInserted = False
                    End If
                End Using

                Dim GroupID As String = ""

                'Create Activity Group
                Using cmd As New SqlClient.SqlCommand
                    cmd.Connection = sqlcon
                    cmd.Transaction = tran
                    cmd.CommandText = "INSERT INTO dbo.tblActivityGroup ([FKeyIDNbr],[ActivityType],[COIDNbr],[LName],[FName],[MName],[DOB],[NatCode],[NatName]) " & _
                        "SELECT ci.PKey, 'ashore', COIDNo, LName,FName,MName,DOB,NatCode,ac.Nat " & _
                        "FROM tblCrewInfo ci LEFT OUTER JOIN tblAdmCntry ac ON ac.PKey = ci.NatCode " & _
                        "WHERE ci.PKey = '" & strIDs & "'"
                    inGroup = (cmd.ExecuteNonQuery().Equals(1))

                    'Get GroupID
                    If inGroup Then
                        cmd.CommandText = "SELECT [PKey] FROM mps.dbo.tblActivityGroup WHERE ID=IDENT_CURRENT('tblActivityGroup')"
                        GroupID = IfNull((cmd.ExecuteScalar()), "")
                        With _CrewInformation
                            If GroupID <> "" Then
                                'gQuery = "INSERT INTO [dbo].[tblActivity]" & _
                                '    "([FKeyActivityGroupID]" & _
                                '    ",[AgentName]" & _
                                '    ",[FKeyAgentCode]" & _
                                '    ",[StatName] " & _
                                '    ",[FKeyStatCode]" & _
                                '    ", [DateUpdated]" & _
                                '    ", [LastUpdatedBy]" & _
                                '    ", [RankName]" & _
                                '    ", [FKeyRankCode]" & _
                                '    ", [ActDateStart])" & _
                                '    "VALUES" & _
                                '    "('" & GroupID & "'" & _
                                '    ",'" & .AgentName.Replace("'", "''") & "'" & _
                                '    ",'" & .AgentCode.Replace("'", "''") & "'" & _
                                '    ",(SELECT Name FROM dbo.tblAdmStat WHERE PKey='SYSAPP')" & _
                                '    ",'SYSAPP'" & _
                                '    ",GETDATE()" & _
                                '    ",'" & .LastUpdatedBy.Replace("'", "''") & "'" & _
                                '    ",'" & .RankName.Replace("'", "''") & "'" & _
                                '    ",'" & .RankCode.Replace("'", "''") & "'" & _
                                '    ", GETDATE())"
                                gQuery = "INSERT INTO [dbo].[tblActivity]" & _
                                    "([FKeyActivityGroupID]" & _
                                    ",[AgentName]" & _
                                    ",[FKeyAgentCode]" & _
                                    ",[StatName] " & _
                                    ",[FKeyStatCode]" & _
                                    ", [DateUpdated]" & _
                                    ", [LastUpdatedBy]" & _
                                    ", [RankName]" & _
                                    ", [FKeyRankCode]" & _
                                    ", [ActDateStart])" & _
                                    "VALUES" & _
                                    "(@GroupID " & _
                                    ", @AgenName" & _
                                    ", @AgentCode" & _
                                    ",(SELECT Name FROM dbo.tblAdmStat WHERE PKey='SYSAPP')" & _
                                    ",'SYSAPP'" & _
                                    ",GETDATE()" & _
                                    ",@LastUpdatedBy" & _
                                    ",@RankName" & _
                                    ",@RankCode" & _
                                    ", GETDATE())"
                                With cmd
                                    .Parameters.AddWithValue("@GroupID", GroupID)
                                    '.Parameters.Add("@GroupID", SqlDbType.VarChar, 15).Value = GroupID
                                    .Parameters.AddWithValue("@AgenName", _CrewInformation.AgentName)
                                    .Parameters.AddWithValue("@AgentCode", _CrewInformation.AgentCode)
                                    .Parameters.AddWithValue("@LastUpdatedBy", _CrewInformation.LastUpdatedBy)
                                    .Parameters.AddWithValue("@RankName", _CrewInformation.RankName)
                                    .Parameters.AddWithValue("@RankCode", _CrewInformation.RankCode)
                                    .Parameters.AddWithValue("@FKeyWScaleRankCode", _CrewInformation.WScaleRankCode)
                                    .Parameters.AddWithValue("@FkeyWScaleCode", _CrewInformation.WScaleCode)
                                End With
                            Else
                                'cmd.CommandText = "UPDATE [dbo].[tblActivity] SET" & _
                                '    "[AgentName]= '" & .AgentName & "'" & _
                                '    ",[StatName]='" & .StatName & "'" & _
                                '    ",[DateUpdated]= GETDATE()" & _
                                '    ",[LastUpdateBy]= '" & .LastUpdatedBy & "'" & _
                                '    ",[RankName]= '" & .RankName & "'" & _
                                '    ",[FkeyWScaleCode]='" & .WScaleCode & "'" & _
                                '    ",[FKeyWScaleRankCode]='" & .WScaleRankCode & "'" & _
                                '    "WHERE [FKeyActivityGroupID]='" & GroupID & "' AND PKey = '" & .ActID & "'"

                                cmd.CommandText = "UPDATE [dbo].[tblActivity] SET" & _
                                    "[AgentName]= @AgentName" & _
                                    ",[StatName]=@StatName" & _
                                    ",[DateUpdated]= GETDATE()" & _
                                    ",[LastUpdateBy]= @LastUpdatedBy" & _
                                    ",[RankName]= @RankName" & _
                                    "WHERE [FKeyActivityGroupID]=@GroupID AND PKey = @ActID"
                                'commented out by tony20170705 - no need to update wage scale
                                '",[FkeyWScaleCode]=@FkeyWScaleCode" & _
                                '",[FKeyWScaleRankCode]=@FKeyWScaleRankCode" & _
                                '"WHERE [FKeyActivityGroupID]=@GroupID AND PKey = @ActID"
                                With cmd
                                    .Parameters.AddWithValue("@ActID", _CrewInformation.ActID)
                                    .Parameters.AddWithValue("@GroupID", GroupID)
                                    .Parameters.AddWithValue("@LastUpdatedBy", _CrewInformation.LastUpdatedBy)
                                    .Parameters.AddWithValue("@RankName", _CrewInformation.RankName)
                                    'commented out by tony20170705 - no need to update wage scale
                                    '.Parameters.AddWithValue("@FKeyWScaleRankCode", _CrewInformation.WScaleRankCode)
                                    '.Parameters.AddWithValue("@FkeyWScaleCode", _CrewInformation.WScaleCode)
                                    .Parameters.AddWithValue("@StatName", _CrewInformation.StatName)
                                End With
                            End If
                            cmd.CommandText = gQuery
                            inAct = (cmd.ExecuteNonQuery().Equals(1))
                        End With
                    End If
                End Using
            End If
            If CrewInserted And idInserted And inAct And inGroup Then
                tran.Commit()
                retVal = strIDs
            End If
        Catch ex As Exception
            tran.Rollback()
            retVal = ""
        Finally
            sqlcon.Close()
        End Try
        Return retVal
    End Function

    Public Function DuplicateAdminRecord(TableName As String, PKeyValue As String, UpdateText As String) As Boolean
        Dim retVal As Boolean = False
        Dim tran As SqlClient.SqlTransaction = Nothing
        Dim ParentInserted As Boolean = False, SubInserted As Boolean = False
        Dim idInserted As Boolean = False
        Dim AcTInserted As Boolean = False
        Dim strIDs As String = ""
        Dim gQuery = ""
        Dim inGroup As Boolean = False
        Dim inAct As Boolean = False

        Dim SubTblCount As Integer = CountRelatedTables(TableName)
        'Dim DS As New DataSet
        'Dim ParentTbl As New DataTable
        'Dim strList() As String = UpdateText.Split(",")

        Try
            Dim ParentDT As New DataTable
            ParentDT = CreateTable("SELECT * from dbo." & TableName & " WHERE PKey = " & PKeyValue)

            sqlcon.Open()
            tran = sqlcon.BeginTransaction()
            'Get the Related Tables
            'BeginReader("SELECT * FROM FN_GetSubAdmTbl('" & TableName & "')")
            'Dim ParentRelatedTableCount As Integer = ReaderItemCount()
            'CloseReader()
            'Duplicate The Record
            Using cmd As New SqlClient.SqlCommand
                'Update DT
                cmd.CommandText = DataRowToSQL(1, TableName, ParentDT, UpdateText)
                'cmd.CommandText = DataRowToSQL(1, TableName, ParentDT, "")
                cmd.Transaction = tran
                cmd.Connection = sqlcon
                ParentInserted = (cmd.ExecuteNonQuery().Equals(1))
                'cmd.CommandText = "SELECT [PKey] FROM mps.dbo.tblCrewInfo WHERE ID=IDENT_CURRENT('tblCrewInfo')"
                '_id = sqlcmd.ExecuteScalar()
            End Using
            If ParentInserted Then
                If SubTblCount > 0 Then

                    'Get Parent ID
                    Using cmd As New SqlClient.SqlCommand
                        cmd.Connection = sqlcon
                        cmd.CommandText = "SELECT [PKey] FROM mps.dbo." & TableName & " WHERE ID=IDENT_CURRENT('" & TableName & "')"
                        cmd.Transaction = tran
                        strIDs = cmd.ExecuteScalar()
                        If strIDs <> "" Then
                            idInserted = True
                        Else
                            idInserted = False
                        End If
                    End Using
                    Dim SubDtList As New DataTable
                    'get the Related Table
                    Using cmd As New SqlClient.SqlCommand
                        cmd.Connection = sqlcon
                        cmd.CommandText = "SELECT * FROM FN_GetSubAdmTbl('" & TableName & "')"
                        cmd.Transaction = tran
                        Using sqladp As New SqlClient.SqlDataAdapter(cmd)
                            sqladp.Fill(SubDtList)
                        End Using
                    End Using


                    If SubDtList.Rows.Count > 0 Then
                        'duplicate the 1st Level
                        For x As Integer = 0 To SubDtList.Rows.Count - 1
                            Dim relsubTblcount As Integer = 0
                            Dim sutTblDL As New DataTable
                            Dim RtblName As String = SubDtList.Rows(x).Item(0)
                            Dim RColFieldName As String = SubDtList.Rows(x).Item(1)
                            'get the Data related to ParentValue
                            Using cmd As New SqlClient.SqlCommand
                                cmd.Connection = sqlcon
                                'cmd.CommandText = "SELECT COUNT(*) FROM FN_GetSubAdmTbl('" & RtblName & "')"
                                cmd.CommandText = "SELECT * FROM dbo." & RtblName & " WHERE " & RColFieldName & "=" & PKeyValue & ""
                                cmd.Transaction = tran
                                'relsubTblcount = cmd.ExecuteScalar()
                                Using sqladp As New SqlClient.SqlDataAdapter(cmd)
                                    sqladp.Fill(sutTblDL)
                                End Using
                            End Using

                            relsubTblcount = sutTblDL.Rows.Count
                            If relsubTblcount > 0 Then
                                For Each rc As DataRow In sutTblDL.Rows
                                    Dim strID2 As String = "" 'inserted PKEY NEW
                                    'inster the duplicate data

                                    Using cmd As New SqlClient.SqlCommand
                                        cmd.Connection = sqlcon
                                        cmd.CommandText = DataRowToSQL(1, RtblName, sutTblDL, rc, "[" & RColFieldName & "]='" & strIDs & "'")
                                        cmd.Transaction = tran
                                        SubInserted = (cmd.ExecuteNonQuery().Equals(1))
                                    End Using

                                    'get the id of the Inserted Row
                                    Using cmd As New SqlClient.SqlCommand
                                        cmd.Connection = sqlcon
                                        cmd.CommandText = "SELECT [PKey] FROM mps.dbo." & RtblName & " WHERE ID=IDENT_CURRENT('" & RtblName & "')"
                                        cmd.Transaction = tran
                                        strID2 = cmd.ExecuteScalar()
                                        If strID2 <> "" Then
                                            idInserted = True
                                        Else
                                            idInserted = False
                                        End If
                                    End Using

                                    If idInserted Then
                                        'get the related tbl
                                        Dim sublvl2DT As New DataTable
                                        Using cmd As New SqlClient.SqlCommand
                                            cmd.Connection = sqlcon
                                            cmd.CommandText = "SELECT * FROM FN_GetSubAdmTbl('" & RtblName & "')"
                                            cmd.Transaction = tran
                                            'fill Table
                                            Using sqladp As New SqlClient.SqlDataAdapter(cmd)
                                                sqladp.Fill(sublvl2DT)
                                            End Using
                                        End Using

                                        'duplicate
                                        If sublvl2DT.Rows.Count > 0 Then
                                            For Each Sublvl2Row As DataRow In sublvl2DT.Rows
                                                Dim subLvl2TblName As String = Sublvl2Row.Item(0), subLvl2ColName As String = Sublvl2Row.Item(1)
                                                Dim sublvl2dt_2 As New DataTable
                                                Using cmd As New SqlClient.SqlCommand
                                                    cmd.Connection = sqlcon
                                                    cmd.CommandText = "SELECT * FROM dbo." & subLvl2TblName & " WHERE " & subLvl2ColName & "='" & rc.Item("PKey") & "'"
                                                    cmd.Transaction = tran
                                                    Using sqladp As New SqlClient.SqlDataAdapter(cmd)
                                                        sqladp.Fill(sublvl2dt_2)
                                                    End Using
                                                End Using

                                                'inster the duplicate data
                                                If sublvl2dt_2.Rows.Count > 0 Then
                                                    For Each sub2dr As DataRow In sublvl2dt_2.Rows
                                                        Using cmd As New SqlClient.SqlCommand
                                                            cmd.Connection = sqlcon
                                                            cmd.CommandText = DataRowToSQL(1, subLvl2TblName, sublvl2dt_2, sub2dr, "[" & subLvl2ColName & "]='" & strID2 & "'")
                                                            cmd.Transaction = tran
                                                            SubInserted = (cmd.ExecuteNonQuery().Equals(1))
                                                        End Using
                                                    Next

                                                End If

                                            Next
                                        End If
                                    End If
                                Next
                            End If
                        Next
                    End If
                End If
            End If
            If (ParentInserted And SubInserted) Or (ParentInserted And SubTblCount = 0) Then
                tran.Commit()
                retVal = True
            End If
        Catch ex As Exception
            tran.Rollback()
            retVal = False
        Finally
            sqlcon.Close()
        End Try

        Return retVal
    End Function

    Private Function CountRelatedTables(TableName As String)
        Dim retval As Integer = 0
        BeginReader("SELECT COUNT(*) FROM FN_GetSubAdmTbl('" & TableName & "')")
        While Read()
            retval = ReaderItem(0)
        End While
        CloseReader()
        Return retval
    End Function

    Private Function DataRowToSQL(Type As Integer, tableName As String, dt As DataTable, UpdateText As String, Optional LastUpdatedBy As String = "NULL") As String
        Dim retval As String = ""
        Try
            Dim strList() As String = UpdateText.Split(",")
            'Dim UpdateValues As New List(Of Dictionary(Of Integer, String))()
            Dim UpDT As New DataTable
            UpDT.Columns.Add("ColName", System.Type.GetType("System.String"))
            UpDT.Columns.Add("Value", System.Type.GetType("System.String"))

            If strList.Length > 0 Then
                For x As Integer = 0 To strList.Length - 1
                    Dim strItem() As String = strList(x).Split("=")
                    If strList.Length > 0 Then
                        UpDT.Rows.Add(strItem(0), strItem(1))
                    End If
                Next
            End If

            Select Case Type
                Case 1 'Insert
                    Dim val As String = ""
                    Dim col As String = ""
                    'For Each dr As DataRow In dt.Rows
                    For Each dc As DataColumn In dt.Columns
                        'If Not (dc.ColumnName.Equals("ID")) And Not (dc.ColumnName.Equals("PKey")) Then
                        If Not (dc.ColumnName.Equals("ID")) And Not (dc.ColumnName.Equals("PKey")) And Not (dc.ColumnName.Equals("DateUpdated")) Then
                            col = col & dc.ColumnName & ","
                            If Not (dc.ColumnName.Equals("LastUpdatedBy")) Then
                                Dim flag As Boolean = True
                                For Each dr As DataRow In dt.Rows
                                    While flag
                                        Dim FoundRow() As Data.DataRow = UpDT.Select("ColName='[" & dc.ColumnName & "]'")
                                        If FoundRow.Count > 0 Then
                                            For x As Integer = 0 To FoundRow.Count - 1
                                                If FoundRow(x).Item("ColName").Equals("[" & dc.ColumnName & "]") Then
                                                    val = val & FoundRow(x).Item("Value").ToString & ","
                                                    'Exit For
                                                    flag = False
                                                Else
                                                    'val = val & "'" & dr.Item(dc).ToString.Replace("'", "''") & "',"
                                                    val = val & InsertValues(dr.Item(dc)) & ","
                                                    'Exit For
                                                    flag = False
                                                End If
                                            Next
                                        Else
                                            'val = val & "'" & dr.Item(dc).ToString.Replace("'", "''") & "',"
                                            val = val & InsertValues(dr.Item(dc)) & ","
                                            'Exit For
                                            flag = False
                                        End If
                                    End While
                                Next
                            Else
                                val = val & LastUpdatedBy & ","
                            End If

                        End If
                    Next
                    'Next
                    val = val.Substring(0, val.Length - 1)
                    col = col.Substring(0, col.Length - 1)
                    retval = "INSERT INTO dbo." & tableName & "(" & col & ") VALUES(" & val & ")"
            End Select
        Catch ex As Exception
            retval = ""

        End Try

        Return retval
    End Function

    Private Function DataRowToSQL(Type As Integer, tableName As String, dt As DataTable, dr As DataRow, UpdateText As String, Optional LastUpdatedBy As String = "NULL") As String
        Dim retval As String = ""
        Try
            Dim strList() As String = UpdateText.Split(",")
            'Dim UpdateValues As New List(Of Dictionary(Of Integer, String))()
            'For Each Strs As String In strList
            '    Dim strItem() As String = Strs.Split("=")
            '    UpdateValues.Add(New Dictionary(Of Integer, String)() From {{strItem(0), strItem(1)}})
            'Next
            Dim UpDT As New DataTable
            UpDT.Columns.Add("ColName", System.Type.GetType("System.String"))
            UpDT.Columns.Add("Value", System.Type.GetType("System.String"))


            If strList.Length > 0 Then
                For x As Integer = 0 To strList.Length - 1
                    Dim strItem() As String = strList(x).Split("=")
                    If strList.Length > 0 Then
                        UpDT.Rows.Add(strItem(0), strItem(1))
                    End If
                Next
            End If


            Select Case Type
                Case 1 'Insertc
                    Dim val As String = "", col As String = ""
                    'For Each dr As DataRow In dt.Rows
                    For Each dc As DataColumn In dt.Columns
                        If Not (dc.ColumnName.Equals("ID")) And Not (dc.ColumnName.Equals("PKey")) And Not (dc.ColumnName.Equals("DateUpdated")) Then
                            col = col & dc.ColumnName & ","
                            If Not (dc.ColumnName.Equals("LastUpdatedBy")) Then
                                Dim FoundRow() As Data.DataRow = UpDT.Select("ColName='[" & dc.ColumnName & "]'")
                                If FoundRow.Count > 0 Then
                                    For x As Integer = 0 To FoundRow.Count - 1
                                        If FoundRow(x).Item("ColName").Equals("[" & dc.ColumnName & "]") Then
                                            val = val & FoundRow(x).Item("Value").ToString & ","
                                        Else
                                            'val = val & "'" & dr.Item(dc).ToString.Replace("'", "''") & "',"
                                            val = val & InsertValues(dr.Item(dc)) & ","

                                        End If
                                    Next
                                Else
                                    'val = val & "'" & dr.Item(dc).ToString.Replace("'", "''") & "',"
                                    val = val & InsertValues(dr.Item(dc)) & ","
                                End If
                            Else
                                val = val & LastUpdatedBy & ","
                            End If
                        End If
                    Next
                    'Next
                    val = val.Substring(0, val.Length - 1)
                    col = col.Substring(0, col.Length - 1)
                    retval = "INSERT INTO dbo." & tableName & "(" & col & ") VALUES(" & val & ")"
            End Select
        Catch ex As Exception
            retval = ""
        End Try
        Return retval
    End Function

    Private Function InsertValues(ObjectValue As Object) As String
        Dim retval As String = ""
        Try
            Select Case ObjectValue.GetType().Name
                Case "DateTime"
                    retval = Util.ChangeToSQLDate(CDate(ObjectValue))
                Case "Double", "Integer"
                    retval = CStr(ObjectValue)
                Case Else
                    retval = "'" & CStr(ObjectValue).Replace("'", "''") & "'"

            End Select
        Catch ex As Exception
            retval = "NULL"
        End Try
        Return retval
    End Function

    'Execute the specified sql statement
    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function RunSql(ByVal sql As String, Optional ByVal showErr As Boolean = True, Optional ByRef nAffectedRows As Integer = 0) As Boolean
        Dim info As Boolean = True
        Try
            sqlcmd = New SqlClient.SqlCommand(sql, sqlcon)
            sqlcon.Open()
            sqlcmd.CommandTimeout = 10000
            nAffectedRows = sqlcmd.ExecuteNonQuery()
            sqlcmd.Dispose()
            sqlcon.Close()
            'Return True
            info = True
        Catch ex As SqlClient.SqlException
            ErrMsg = ex.Message
            LogErrors(ErrMsg)
            info = False
            If showErr Then
                MsgBox(ErrMsg, MsgBoxStyle.Exclamation + MsgBoxStyle.OkOnly, GetAppName)
            End If
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
            Return info
        End Try
        Return info
    End Function

    'Execute the specified sql statement
    '<System.Diagnostics.DebuggerStepThrough()> _
    Public Function RunSqls(ByVal sqls As ArrayList, Optional ByVal showErr As Boolean = True) As Boolean
        ErrMsg = ""
        ErrorMessage = New System.Text.StringBuilder()
        Try
            Dim sql As String
            sqlcmd = New SqlClient.SqlCommand()
            sqlcmd.Connection = sqlcon
            sqlcon.Open()
            For Each sql In sqls
                If sql <> "" Then
                    sqlcmd.CommandText = sql
                    Try
                        sqlcmd.ExecuteNonQuery()
                    Catch ex As Exception
                        ErrMsg = String.Format("{0}Error Message:{1}{2}SQL Statement:{3}{4}" + vbCrLf, ErrMsg, ex.Message, Environment.NewLine, sql, Environment.NewLine)
                        If ErrorMessage.Length > 0 Then ErrorMessage.Append(vbNewLine)
                        ErrorMessage.Append(ErrMsg)
                    End Try
                End If
            Next
            sqlcmd.Dispose()
            sqlcon.Close()
            If ErrMsg <> "" Then
                If showErr Then
                    MsgBox(ErrMsg, MsgBoxStyle.Exclamation + MsgBoxStyle.OkOnly, GetAppName)
                End If
                LogErrors(ErrMsg)

                '------------------------------------------
                'Edited by Tony20161108 - doesn't return false if has error
                'Return True
                Return False
            Else
                Return True
                '------------------------------------------
            End If

        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
            If showErr Then
                MsgBox(ErrMsg, MsgBoxStyle.Exclamation + MsgBoxStyle.OkOnly, GetAppName)
            End If
            LogErrors(ErrMsg)
            Return False
        End Try
    End Function

    Public Function RunSqls(ByVal sqls As ArrayList, returnColumns As ArrayList, ByRef returnDT As DataTable, Optional ByVal showErr As Boolean = True) As Boolean
        ErrMsg = ""
        ErrorMessage = New System.Text.StringBuilder()

        For Each item In returnColumns
            returnDT.Columns.Add(item.ToString)
        Next

        Try
            Dim sql As String
            sqlcmd = New SqlClient.SqlCommand()

            For Each item In returnColumns
                sqlcmd.Parameters.Add(item.ToString, SqlDbType.NVarChar)
                sqlcmd.Parameters(item.ToString).Direction = ParameterDirection.Output
                sqlcmd.Parameters(item.ToString).Size = 500
            Next

            sqlcmd.Connection = sqlcon
            sqlcon.Open()
            For Each sql In sqls
                If sql <> "" Then
                    sqlcmd.CommandText = sql
                    Try

                        sqlcmd.ExecuteNonQuery()

                        Dim row As DataRow = returnDT.NewRow
                        For Each item In returnColumns
                            row(item.ToString) = sqlcmd.Parameters(item.ToString).Value
                        Next
                        returnDT.Rows.Add(row)

                    Catch ex As Exception
                        ErrMsg = String.Format("{0}Error Message:{1}{2}SQL Statement:{3}{4}" + vbCrLf, ErrMsg, ex.Message, Environment.NewLine, sql, Environment.NewLine)
                        If ErrorMessage.Length > 0 Then ErrorMessage.Append(vbNewLine)
                        ErrorMessage.Append(ErrMsg)
                    End Try
                End If
            Next
            sqlcmd.Dispose()
            sqlcon.Close()
            If ErrMsg <> "" Then
                If showErr Then
                    MsgBox(ErrMsg, MsgBoxStyle.Exclamation + MsgBoxStyle.OkOnly, GetAppName)
                End If
                LogErrors(ErrMsg)

                '------------------------------------------
                'Edited by Tony20161108 - doesn't return false if has error
                'Return True
                Return False
            Else
                Return True
                '------------------------------------------
            End If

        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
            If showErr Then
                MsgBox(ErrMsg, MsgBoxStyle.Exclamation + MsgBoxStyle.OkOnly, GetAppName)
            End If
            LogErrors(ErrMsg)
            Return False
        End Try
    End Function

    'Execute Parameterized Sql Statement
    Public Function RunSQL(ByVal SQL As String, ByVal SQLParams() As SqlClient.SqlParameter) As Boolean
        Dim retVal As Boolean = False
        Try
            sqlcon.Open()
            Using cmd As New SqlClient.SqlCommand()
                cmd.CommandText = SQL
                cmd.Connection = sqlcon
                cmd.Parameters.AddRange(SQLParams.ToArray())
                cmd.ExecuteNonQuery()
            End Using
            sqlcon.Close()
            retVal = True
        Catch ex As Exception
            ErrMsg = ex.Message
            retVal = False
        Finally
            If sqlcon.State = ConnectionState.Open Then
                sqlcon.Close()
            End If
        End Try
        Return retVal
    End Function

    'Execute the specified sql statement in a transaction
    '<System.Diagnostics.DebuggerStepThrough()> _
    Public Function RunTransaction(ByVal sqls As ArrayList) As Boolean
        Dim retval As Boolean = False
        Dim sql As String
        Try
            sqlcon.Open()
            sqlcmd = sqlcon.CreateCommand()
            Dim transaction As SqlClient.SqlTransaction = sqlcon.BeginTransaction()
            sqlcmd.Connection = sqlcon
            sqlcmd.Transaction = transaction
            Try
                For Each sql In sqls
                    If sql <> "" Then
                        sqlcmd.CommandText = sql
                        sqlcmd.ExecuteNonQuery()
                    End If
                Next
                transaction.Commit()
                retval = True
            Catch ex As Exception
                transaction.Rollback()
                retval = False
            End Try
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
            retval = False
        End Try
        Return retval
    End Function

    'expr -> field or expresion you want to lookup
    'domain -> requires <table/query> name in the specified database or <database>.<table/view> name on the specified server.
    'defaultvalue -> the return value if expresion is null, cannot be found or the function encountered error.
    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function DLookUp(ByVal expr As String, ByVal domain As String, ByVal defaultvalue As String) As String
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand("SELECT TOP 1 " & expr & " FROM " & domain, sqlcon)
            sqlrdr = sqlcmd.ExecuteReader()
            If sqlrdr.HasRows Then
                sqlrdr.Read()
                If Not (sqlrdr(0) Is System.DBNull.Value) Then
                    defaultvalue = sqlrdr(0).ToString
                End If
            End If
            sqlrdr.Close()
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        Return defaultvalue
    End Function

    'expr -> field or expresion you want to lookup
    'domain -> requires <table/query> name in the specified database or <database>.<table/view> name on the specified server.
    'defaultvalue -> the return value if expresion is null, cannot be found or the function encountered error.
    'Criteria -> primary filter.
    '<System.Diagnostics.DebuggerStepThrough()> _
    Public Function DLookUp(ByVal expr As String, ByVal domain As String, ByVal defaultvalue As String, ByVal Criteria As String) As String
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand("SELECT TOP 1 " & expr & " FROM " & domain & IIf(Criteria = "", "", " WHERE " & Criteria).ToString, sqlcon)
            sqlrdr = sqlcmd.ExecuteReader()
            If sqlrdr.HasRows Then
                sqlrdr.Read()
                If Not (sqlrdr(0) Is System.DBNull.Value) Then
                    defaultvalue = sqlrdr(0).ToString
                End If
            End If
            sqlrdr.Close()
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        Return defaultvalue
    End Function

    'expr -> field or expresion you want to lookup
    'domain -> requires <table/query> name in the specified database or <database>.<table/view> name on the specified server.
    'defaultvalue -> the return value if expresion is null, cannot be found or the function encountered error.
    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function DLookUp(ByVal expr As String, ByVal domain As Date, ByVal defaultvalue As String) As Date
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand("SELECT TOP 1 " & expr & " FROM " & domain, sqlcon)
            sqlrdr = sqlcmd.ExecuteReader()
            If sqlrdr.HasRows Then
                sqlrdr.Read()
                If Not (sqlrdr(0) Is System.DBNull.Value) Then
                    defaultvalue = sqlrdr(0).ToString
                End If
            End If
            sqlrdr.Close()
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        Return defaultvalue
    End Function

    'expr -> field or expresion you want to lookup
    'domain -> requires <table/query> name in the specified database or <database>.<table/view> name on the specified server.
    'defaultvalue -> the return value if expresion is null, cannot be found or the function encountered error.
    'Criteria -> primary filter.
    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function DLookUp(ByVal expr As String, ByVal domain As String, ByVal defaultvalue As Date, ByVal Criteria As String) As Date
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand("SELECT TOP 1 " & expr & " FROM " & domain & IIf(Criteria = "", "", " WHERE " & Criteria).ToString, sqlcon)
            sqlrdr = sqlcmd.ExecuteReader()
            If sqlrdr.HasRows Then
                sqlrdr.Read()
                If Not (sqlrdr(0) Is System.DBNull.Value) Then
                    defaultvalue = sqlrdr(0)
                End If
            End If
            sqlrdr.Close()
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        Return defaultvalue
    End Function

    'expr -> field or expresion you want to lookup
    'domain -> requires <table/query> name in the specified database or <database>.<table/view> name on the specified server.
    'Criteria -> primary filter.
    'check for duplicate record
    '<System.Diagnostics.DebuggerStepThrough()> _
    Public Function HasDuplicate(ByVal domain As String, ByVal Criteria As String) As Boolean
        Dim defaultvalue As Boolean = False
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand("SELECT TOP 1 COUNT(*) FROM " & domain & IIf(Criteria = "", "", " WHERE " & Criteria).ToString, sqlcon)
            sqlrdr = sqlcmd.ExecuteReader()
            If sqlrdr.HasRows Then
                sqlrdr.Read()
                If Not (sqlrdr(0) Is System.DBNull.Value) Then
                    'defaultvalue = False
                    defaultvalue = sqlrdr(0)
                End If
            End If
            sqlrdr.Close()
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        Return defaultvalue
    End Function

    'this will check the duplicates using Controls
    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function HasDuplicate(ByVal domain As String, ByVal ctrs() As DevExpress.XtraEditors.BaseEdit) As Boolean
        Dim info As Boolean = False 'Return Value
        Dim ctr As DevExpress.XtraEditors.BaseEdit
        Dim str As String = ""
        For Each ctr In ctrs
            If Not TypeOf (ctr) Is DevExpress.XtraEditors.DateEdit Then
                If TypeOf (ctr.EditValue) Is String Then
                    If Trim(ctr.EditValue) <> "" Then
                        If HasDuplicate(domain, "[" & Mid(ctr.Name, 4) & "]='" & ctr.EditValue & "'") Then
                            info = True
                            str = Mid(ctr.Name, 4) & " is already in use." & vbCrLf & str
                        End If
                    End If
                End If

            End If
        Next
        If info Then
            MsgBox(str, MsgBoxStyle.Exclamation, GetAppName)
        End If
        Return info
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Sub BeginReader(ByVal _sql As String)
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand(_sql, sqlcon)
            sqlrdr = sqlcmd.ExecuteReader()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
    End Sub

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function Read()
        Try
            Return sqlrdr.Read()
        Catch ex As Exception
            ErrMsg = ex.Message
            Return False
        End Try
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function ReaderItem(ByVal index As Integer) As Object
        Try
            Return sqlrdr.Item(index)
        Catch ex As Exception
            ErrMsg = ex.Message
            Return System.DBNull.Value
        End Try
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function ReaderItem(ByVal name As String) As Object
        Try
            Return sqlrdr.Item(name)
        Catch ex As Exception
            ErrMsg = ex.Message
            Return System.DBNull.Value
        End Try
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function ReaderItem(ByVal name As String, defaultvalue As Object) As Object
        Try
            If sqlrdr.Item(name) Is System.DBNull.Value Then
                Return defaultvalue
            Else
                Return sqlrdr.Item(name)
            End If
        Catch ex As Exception
            ErrMsg = ex.Message
            Return defaultvalue
        End Try
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function ReaderItem(ByVal index As Integer, defaultvalue As Object) As Object
        Try
            If sqlrdr.Item(index) Is System.DBNull.Value Then
                Return defaultvalue
            Else
                Return sqlrdr.Item(index)
            End If
        Catch ex As Exception
            ErrMsg = ex.Message
            Return defaultvalue
        End Try
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function ReaderItemCount() As Integer
        Try
            Return sqlrdr.FieldCount
        Catch ex As Exception
            ErrMsg = ex.Message
            Return 0
        End Try
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function HasRows() As Boolean
        Try
            Return sqlrdr.HasRows
        Catch ex As Exception
            ErrMsg = ex.Message
            Return False
        End Try
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Sub CloseReader()
        Try
            sqlrdr.Close()
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
    End Sub

    '<System.Diagnostics.DebuggerStepThrough()> _
    Public Function Connect() As Boolean
        Try
            ErrMsg = ""
            sqlcon.Open()
            sqlcon.Close()
            Connected = True
            Return True
        Catch ex As Exception
            ErrMsg = ex.Message
            Connected = False
            Return False
        End Try
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function GetDataDir(ByVal cDbName As String) As String
        Dim cFileName As String = ""
        sqlcon.Open()
        sqlcmd = New SqlClient.SqlCommand("select physical_name from master.sys.master_files WHERE databasestrID = DBstrID(N'" & cDbName & "') AND name='" & cDbName & "'", sqlcon)
        sqlrdr = sqlcmd.ExecuteReader()
        If sqlrdr.HasRows Then
            sqlrdr.Read()
            cFileName = sqlrdr(0).ToString
        End If
        sqlrdr.Close()
        sqlcmd.Dispose()
        sqlcon.Close()
        Return cFileName
    End Function

    '<System.Diagnostics.DebuggerStepThrough()> _
    'Public Function Backup(ByVal cDBName As String, ByVal cFileName As String) As Boolean
    '    Return RunSql("BACKUP DATABASE " & cDBName & " TO DISK='" & cFileName & "'")
    'End Function

    ''<System.Diagnostics.DebuggerStepThrough()> _
    'Public Function Restore(ByVal cDBName As String, ByVal cFileName As String) As Boolean
    '    Return RunSql("USE MASTER; ALTER DATABASE " & cDBName & " SET SINGLE_USER WITH ROLLBACK IMMEDIATE; RESTORE DATABASE " & cDBName & " FROM DISK='" & cFileName & "'; ALTER DATABASE " & cDBName & " SET MULTI_USER")
    'End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function GetLastErrorMessage()
        Return ErrMsg
    End Function

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Sub ShowLastErrorMessage()
        MsgBox(ErrMsg, MsgBoxStyle.Critical, GetAppName)
    End Sub

    '<System.Diagnostics.DebuggerStepThrough()> _
    Public Function Settings(ByVal strCode As String) As String
        Dim retVal As String = ""
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand("SELECT TOP 1 TextValue FROM MPS.dbo.tblConfig WHERE Code='" & strCode & "'", sqlcon)
            sqlrdr = sqlcmd.ExecuteReader()
            If sqlrdr.HasRows Then
                sqlrdr.Read()
                If Not (sqlrdr(0) Is System.DBNull.Value) Then
                    retVal = sqlrdr(0)
                End If
            End If
            sqlrdr.Close()
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            ErrMsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        Return retVal
    End Function

#Region "MPS_Earlsan"
    'Earlsan
    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function GetLastInsertedItem(ByVal ColumnName As String, ByVal domain As String) As String
        Dim defaultvalue As String
        defaultvalue = Nothing
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand("SELECT [" & ColumnName & "] FROM mps.dbo." & domain & " WHERE ID=IDENT_CURRENT('" & domain & "')", sqlcon)
            defaultvalue = sqlcmd.ExecuteScalar()
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            'ErrMsg = ex.Message
            MsgBox(ex.Message, , GetAppName)
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try
        Return defaultvalue
    End Function


    'Save to tblConfig
    '<System.Diagnostics.DebuggerStepThrough()> _
    Public Function SaveConfig(ByVal cCode As String, ByVal cValue As String) As Boolean
        Dim has_rec As Boolean = False
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand("SELECT TextValue FROM MPS.dbo.tblConfig WHERE Code='" & cCode & "'", sqlcon)
            sqlrdr = sqlcmd.ExecuteReader()
            has_rec = sqlrdr.HasRows
            sqlrdr.Close()
            sqlcon.Close()
            If has_rec Then
                RunSql("Update MPS.dbo.tblConfig set TextValue='" & cValue & "' Where Code='" & cCode & "'")
            Else
                RunSql("Insert into MPS.dbo.tblConfig(Code,TextValue) Values('" & cCode & "','" & cValue & "')")
            End If
            Return True
        Catch ex As Exception
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
            Return False
        End Try
        If sqlcon.State <> ConnectionState.Closed Then
            sqlcon.Close()
        End If
    End Function

    'Get item in tblConfig
    '<System.Diagnostics.DebuggerStepThrough()> _
    Public Function GetConfig(ByVal cCode As String) As String
        ''Dim DB As SQLDB
        'Return IfNull(DB.DLookUp("TextValue", "MPS.dbo.tblConfig", "Code='" & cCode & "'"), "")
        Dim defaultvalue As String
        defaultvalue = Nothing
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand("SELECT [TextValue] FROM mps.dbo.tblconfig  WHERE Code='" & cCode & "'", sqlcon)
            Dim tmpval As Object
            tmpval = sqlcmd.ExecuteScalar()
            If IsDBNull(tmpval) Then
                defaultvalue = ""
            Else
                defaultvalue = tmpval
            End If
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            'ErrMsg = ex.Message
            MsgBox(ex.Message, , GetAppName)
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try

        Return IIf(IsNothing(defaultvalue), "", defaultvalue)
    End Function


    'Function that check if it is allowed to delete the record
    <System.Diagnostics.DebuggerStepThrough()> _
    Public Function isDeleteAllowed(ByVal tblName As String, ByVal PKey As String) As Boolean
        Dim isAllowed As Boolean = False
        BeginReader("EXEC dbo.SP_DelAdmRec '" & tblName & "','" & PKey & "'")
        While Read()
            If ReaderItem("isUsed") Then
                isAllowed = False
            Else
                isAllowed = True
            End If
        End While
        CloseReader()
        Return isAllowed
    End Function

    Private Sub AllowFilePathBtn(ByVal btn As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit, Optional ByVal value As Boolean = True)
        For i As Integer = 0 To btn.Buttons.Count - 1
            btn.Buttons(i).Enabled = value
        Next
    End Sub

    Public Function getServerDate(Optional ByRef ErrMsg As String = "") As Date
        Try
            BeginReader("SELECT GETDATE() AS ServerDate")
            If Read() Then
                getServerDate = DateValue(ReaderItem("ServerDate"))
            Else
                getServerDate = Nothing
            End If
            CloseReader()
        Catch ex As Exception
            ErrMsg = ex.Message
            getServerDate = Nothing
        End Try

    End Function

    Public Function getServerDateTime(Optional ByRef ErrMsg As String = "") As DateTime
        Try
            BeginReader("SELECT GETDATE() AS ServerDateTime")
            If Read() Then
                getServerDateTime = CType(ReaderItem("ServerDateTime"), DateTime)
            Else
                getServerDateTime = Nothing
            End If
            CloseReader()
        Catch ex As Exception
            ErrMsg = ex.Message
            getServerDateTime = Nothing
        End Try
    End Function

#End Region

    Public Function GetDefAshStat() As String
        Return DLookUp("PKey", "tblAdmStat", "", "DefAshStat=1")
    End Function

    Public Function runInsert(ByVal sql As String, Optional ByRef errmsg As String = "") As String
        'returns the created id from primary key/autoincrement field of the newly added record.Table must have a indentity field
        'ex. use

        'dim recPKey As String, errmsg As String

        'recPKey = MPSDB.runInsert("insert into tbldocument (FileTag) values('testtest')", errmsg)
        'If errmsg <> "" Then
        '    MsgBox(errmsg)
        'Else
        '    MsgBox(recIDKey)
        'End If

        Dim defaultvalue As String
        defaultvalue = Nothing
        Try
            sqlcon.Open()
            sqlcmd = New SqlClient.SqlCommand(sql & ";" & "Select Scope_Identity()", sqlcon)
            Dim tmpval As String
            tmpval = sqlcmd.ExecuteScalar()
            If IsDBNull(tmpval) Then
                defaultvalue = ""
            Else
                defaultvalue = tmpval
            End If
            sqlcmd.Dispose()
            sqlcon.Close()
        Catch ex As Exception
            'ErrMsg = ex.Message
            'MsgBox(ex.Message, , GetAppName)
            errmsg = ex.Message
            If sqlcon.State <> ConnectionState.Closed Then
                sqlcon.Close()
            End If
        End Try

        Return IIf(IsNothing(defaultvalue), "", defaultvalue)

    End Function

#Region "Audit Log Functions"
    Private Function TestAuditLog() As Boolean
        Dim retVal As Boolean = False
        Dim sqlCon As New SqlClient.SqlConnection(MPSAConnectionString)
        Try
            sqlCon.Open()
            retVal = True
        Catch ex As Exception
            ErrMsg = ex.Message
            If ErrorMessage.Length > 0 Then ErrorMessage.Append(vbNewLine)
            ErrorMessage.Append(vbCrLf & ex.Message)
            retVal = False
        Finally
            If sqlCon.State = ConnectionState.Open Then sqlCon.Close()
        End Try
        Return retVal
    End Function

    Public Function SavePayrollLog(PayID As String, MCode As Integer, RefNo As String, PayType As String,
                                   Principal As String, Vessel As String, UserID As Long, DateOFAction As Date,
                                   LogType As String, ComputerName As String, Remarks As String) As Boolean

        Dim retVal As Boolean = False
        If TestAuditLog() Then
            Dim sqlcon As New SqlClient.SqlConnection(MPSAConnectionString)
            Try
                sqlcon.Open()
                Using cmd As New SqlClient.SqlCommand
                    cmd.Connection = sqlcon
                    cmd.CommandText = "INSERT INTO dbo.tblPayLog(" & _
                        "PayID," & _
                        "MCode," & _
                        "RefNo," & _
                        "PayType," & _
                        "Principal," & _
                        "Vessel," & _
                        "UserID," & _
                        "DateOFAction," & _
                        "LogType," & _
                        "ComputerName," & _
                        "Remarks)" & _
                        "VALUES(" & _
                            "@PayID," & _
                            "@MCode," & _
                            "@RefNo," & _
                            "@PayType," & _
                            "@Principal," & _
                            "@Vessel," & _
                            "@UserID," & _
                            "@DateOFAction," & _
                            "@LogType," & _
                            "@ComputerName," & _
                            "@Remarks)"
                    With cmd.Parameters
                        .AddWithValue("@PayID", PayID)
                        .AddWithValue("@MCode", MCode)
                        .AddWithValue("@RefNo", RefNo)
                        .AddWithValue("@PayType", PayType)
                        .AddWithValue("@Principal", Principal)
                        .AddWithValue("@Vessel", Vessel)
                        .AddWithValue("@UserID", UserID)
                        .AddWithValue("@DateOFAction", DateOFAction.ToString("yyyy-MM-dd HH:mm:ss"))
                        .AddWithValue("@LogType", LogType)
                        .AddWithValue("@ComputerName", ComputerName)
                        .AddWithValue("@Remarks", Remarks)
                    End With
                    retVal = cmd.ExecuteNonQuery().Equals(1)

                End Using
            Catch ex As Exception
                ErrMsg = ex.Message
                If ErrorMessage.Length > 0 Then ErrorMessage.Append(vbNewLine)
                ErrorMessage.Append(vbCrLf & ex.Message)
                retVal = False
            Finally
                If sqlcon.State = ConnectionState.Open Then sqlcon.Close()
            End Try
        Else
            retVal = False
        End If
        Return retVal
    End Function

    Public Function Log_CreateTable(strQuery As String) As DataTable
        Dim cTable As New DataTable
        If TestAuditLog() Then
            Dim sqlcon As New SqlClient.SqlConnection(MPSAConnectionString)
            Try
                sqlcon.Open()
                Using cmd As New SqlClient.SqlCommand
                    cmd.Connection = sqlcon
                    cmd.CommandText = strQuery
                    Using adm As New SqlClient.SqlDataAdapter(cmd)
                        adm.Fill(cTable)
                    End Using
                End Using
            Catch ex As Exception
                ErrMsg = ex.Message
                If ErrorMessage.Length > 0 Then ErrorMessage.Append(vbNewLine)
                ErrorMessage.Append(vbCrLf & ex.Message)
            Finally
                If sqlcon.State = ConnectionState.Open Then sqlcon.Close()
            End Try
        Else
            cTable = Nothing
        End If
        Return cTable
    End Function
#End Region
End Class